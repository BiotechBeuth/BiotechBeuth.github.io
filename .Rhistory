knitr::opts_chunk$set(echo = TRUE)
# Definition einer Funktion
HSA.conc.eval <- function(HSA,
mes) {
stdr <- HSA[3:5]  %>%
rowMeans()
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
conc_eval(abs_P = stdr,
abs_std = mes,
conc_std = conc)
}
# Testen der Funktion
HSA.conc.eval(HSA1, HSA1)
knitr::opts_chunk$set(echo = TRUE)
library(Biotech)
# Wir laden auch tidverse, dieses Paket enthält eine Menge
# nützlicher Funktionen
library(tidyverse)
Std <- tibble(
mes.1 = c(0.031,	0.092,	0.191,	0.278,	0.332, 0.363),
mes.2 = c(0.04, 0.103, 0.201, 0.279, 0.348, 0.36),
mes.3 = c(0.009, 0.077, 0.166, 0.205, 0.25, 0.397),
mes.4 = c(0.007, 0.084, 0.166, 0.205, 0.353, 0.371),
)
conc <- seq(
# die geringste Konzentration
from = 0,
# die Höchste Konzentration
to = 100,
# die Länge
length.out =
# diese muss der Anzahl der Messungen entsprechen
length(Std$mes.1)
)
Std$"conc" <- conc
pander::pander(Std)
Std <- tibble(
mes.1 = c(0.031,	0.092,	0.191,	0.278,	0.332, 0.363),
mes.2 = c(0.04, 0.103, 0.201, 0.279, 0.348, 0.36),
mes.3 = c(0.009, 0.077, 0.166, 0.205, 0.25, 0.397),
mes.4 = c(0.007, 0.084, 0.166, 0.205, 0.353, 0.371),
)
conc <- seq(
# die geringste Konzentration
from = 0,
# die Höchste Konzentration
to = 100,
# die Länge
length.out =
# diese muss der Anzahl der Messungen entsprechen
length(Std$mes.1)
)
Std.mean <- rowMeans(Std)
# Berechnen des Modells
LinMod(abs = Std.mean, conc = conc) %>%
# Überführen des Modells in eine schöne Tabelle
pander::pander()
# Plotten des Modells
plot_regression(abs = Std.mean, conc = conc)
# die gmessenen Werte:
mes.1 <- c(0.185, 0.245, 0.399, 0.429, 0.448, 0.431)
# defineiren des Verdünnunsfaktor
FV <- c(80, 80, 40, 40, 20, 20)
# Hieraus berechnen wir dann direkt die Konzentrationen:
conc.mes <-
conc_eval(abs_P = mes.1, abs_std = Std.mean, conc_std = conc)
conc.rea <-
conc.mes * FV
# Erzeugen einer Ausgabe
print(conc.rea)
str(HSA1)
daten <- HSA1[,2:13] %>%
as.matrix() %>%
as.vector()
# y wird durchnummeriert, als charcter
y  <- paste0(seq(1,12))
# x bekommt die erstest acht Buchstaben des Alphabets
x <- LETTERS[1:8]
# erstellen des Grid
grid.1 <- expand.grid(X = x, Y = y)
# füllen des Grid mit den Daten als Abs
grid.1$Abs <- daten
# plotten des Grid
ggplot( data = grid.1, mapping = aes( X, Y, fill = Abs ) )+
geom_tile()
# Name:
vis96 <-
# die function-Funktion
function(
# Die Argumente der Funktion vis96
HSA.assay) {
# die eigentliche Funktion
daten <- HSA.assay[,2:13] %>%
as.matrix() %>%
as.vector()
y  <- paste0(seq(1,12))
# x bekommt die erstest acht Buchstaben des Alphabets
x <- LETTERS[1:8]
# erstellen des Grid
grid.1 <- expand.grid(X = x, Y = y)
# füllen des Grid mit den Daten als Abs
grid.1$Abs <- daten
# plotten des Grid
vis96 <- ggplot( data = grid.1, mapping = aes( X, Y, fill = Abs ) )+
geom_tile()
# Definition der Ausgabe
return(vis96)
}
vis96(HSA.assay = HSA2)
# wo liegen die Werte der Standards
stdr <- HSA1[3:5]  %>%
rowMeans()
# Zuordnung der Konzentrationen
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
# welche Konentrationen gibt das Modell für die Standards aus
conc_eval(abs_P = stdr, abs_std = stdr, conc_std = conc)
# Definition einer Funktion
HSA.conc.eval <- function(HSA,
mes) {
stdr <- HSA[3:5]  %>%
rowMeans()
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
conc_eval(abs_P = stdr,
abs_std = mes,
conc_std = conc)
}
# Testen der Funktion
HSA.conc.eval(HSA1, HSA1)
# Testen der Funktion
HSA.conc.eval(HSA1, HSA1[4])
# Definition einer Funktion
HSA.conc.eval <- function(HSA,
mes) {
stdr <- HSA[3:5]  %>%
rowMeans()
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
eval <- conc_eval(abs_P = stdr,
abs_std = mes,
conc_std = conc)
return(eval)
}
# Testen der Funktion
HSA.conc.eval(HSA1, HSA1[4])
# Definition einer Funktion
HSA.conc.eval <- function(HSA,
mes) {
stdr <- HSA[3:5]  %>%
rowMeans()
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
eval <- conc_eval(abs_P = mes,
abs_std = stdr,
conc_std = conc)
return(eval)
}
# Definition einer Funktion
HSA.conc.eval <- function(HSA,
mes) {
stdr <- HSA[3:5]  %>%
rowMeans()
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
eval <- conc_eval(abs_P = mes,
abs_std = stdr,
conc_std = conc)
return(eval)
}
# Definition einer Funktion
HSA.conc.eval <- function(HSA,
mes) {
stdr <- HSA[3:5]  %>%
rowMeans()
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
eval <- conc_eval(abs_P = mes,
abs_std = stdr,
conc_std = conc)
return(eval)
}
# Testen der Funktion
HSA.conc.eval(HSA1, HSA1[4])
# Testen der Funktion
HSA.conc.eval(HSA1, HSA1[3:5])
HSA.conc.eval <- function(HSA,
mes,
FV = 1) {
stdr <- HSA[3:5]  %>%
rowMeans()
conc <- c(0, 5, 10, 15, 20, 30, 40, 50)
eval <- conc_eval(abs_P = mes,
abs_std = stdr,
conc_std = conc)
return(eval * FV)
}
HSA.conc.eval(HSA2, HSA2)
HSA.conc.eval(HSA2, HSA2[3:5])
HSA2[5]
HSA2[5, 3]
HSA2[5] + HSA2[6, 1:4]
c(HSA2[5], HSA2[6, 1:4])
c(HSA2[5], HSA2[1:4])
c(HSA2[5], HSA2[1:4,])
c(HSA2[5], HSA2[, 1:4])
c(HSA2[5], HSA2[6 ,1:4])
c(HSA2[5], HSA2[1:4, 6])
c(HSA2[,6:7], HSA2[1:4, 6])
HSA2[,6:7]
rowMeans(HSA2[,6:7])
tibble(
c(rowMeans(HSA2[,6:7]), rowMeans(HSA2[1:4, 8:9]))
)
tibble(
FV1000 = c(rowMeans(HSA2[,6:7]), rowMeans(HSA2[1:4, 8:9])),
FV5000 = c(rowMeans(HSA2[5:9, 8:9], rowMeans(,10:11)))
)
tibble(
FV1000 = c(rowMeans(HSA2[,6:7]), rowMeans(HSA2[1:4, 8:9])),
FV5000 = c(rowMeans(HSA2[5:9, 8:9]), rowMeans(HSA2[,10:11]))
)
tibble(
"FV1000" = c(rowMeans(HSA2[,6:7]), rowMeans(HSA2[1:4, 8:9])),
"FV5000" = c(rowMeans(HSA2[5:9, 8:9]), rowMeans(HSA2[,10:11]))
)
tibble(
"FV1000" = c(rowMeans(HSA2[,6:7]), rowMeans(HSA2[1:4, 8:9])),
"FV5000" = c(rowMeans(HSA2[5:9, 8:9]), rowMeans(HSA2[,10:11]))
)
c(rowMeans(HSA2[5:9, 8:9]),
rowMeans(HSA2[,10:11])
)
c(rowMeans(HSA2[,6:7]),
rowMeans(HSA2[1:4, 8:9])
),
c(rowMeans(HSA2[,6:7]),
rowMeans(HSA2[1:4, 8:9])
)
x.1 <- c(rowMeans(HSA2[,6:7]),
rowMeans(HSA2[1:4, 8:9])
)
length(x.1)
c(rowMeans(HSA2[5:9, 8:9], na.rm = T),
rowMeans(HSA2[,10:11])
)
c(rowMeans(HSA2[5:9, 8:9]),
rowMeans(HSA2[,10:11])
)
c(rowMeans(HSA2[5:9, 8:9]),
rowMeans(HSA2[2:9,10:11])
)
HSA2
c(rowMeans(HSA2[5:8, 8:9]),
rowMeans(HSA2[,10:11])
)
tibble(
"FV1000" = c(rowMeans(HSA2[,6:7]),
rowMeans(HSA2[1:4, 8:9])
),
"FV5000" = c(rowMeans(HSA2[5:8, 8:9]),
rowMeans(HSA2[,10:11])
)
)
dat.1 <- tibble(
"FV1000" = c(rowMeans(HSA2[,6:7]),
rowMeans(HSA2[1:4, 8:9])
),
"FV5000" = c(rowMeans(HSA2[5:8, 8:9]),
rowMeans(HSA2[,10:11])
)
)
dat.1 <- tibble(
"FV1000" = c(rowMeans(HSA2[,6:7]),
rowMeans(HSA2[1:4, 8:9])
),
"FV5000" = c(rowMeans(HSA2[5:8, 8:9]),
rowMeans(HSA2[,10:11])
)
) %>%
HSA.conc.eval(HSA2, ., 1000)
dat.1 <- tibble(
"FV1000" = c(rowMeans(HSA2[,6:7]),
rowMeans(HSA2[1:4, 8:9])
),
"FV5000" = c(rowMeans(HSA2[5:8, 8:9]),
rowMeans(HSA2[,10:11])
)
) %>%
HSA.conc.eval(HSA2, ., 1000)
conc.1 <- tibble(
HSA.conc.eval(HSA.2, dat.1$FV1000, 1000)
)
conc.1 <- tibble(
HSA.conc.eval(HSA.2, dat.1$"FV1000", 1000)
)
conc.1 <- tibble(
HSA.conc.eval(HSA2, dat.1$"FV1000", 1000)
)
conc.1 <- tibble(
HSA.conc.eval(HSA2, dat.1$"FV1000", 1000),
HSA.conc.eval(HSA2, dat.1$FV5000, 5000)
)
conc.1
conc.1 <- tibble(
"aus FV1000" = HSA.conc.eval(HSA2, dat.1$"FV1000", 1000),
"aus FV5000" =  HSA.conc.eval(HSA2, dat.1$FV5000, 5000)
)
conc.1
knitr::opts_chunk$set(echo = TRUE)
library(Biotech)
# Wir laden auch tidverse, dieses Paket enthält eine Menge
# nützlicher Funktionen
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Laden benötigter Pakete
In diesem Intro werden wir mit dem Paket Biotech arbeiten, dieses installieren wir mit:
```{r , eval = F}
devtools::install_github("https://github.com/Utzi1/Biotech")
```
Installieren müssen wir es nur ein Mal, danach jedoch müssen wir in jedem Skript, in welchem es zum Einsatz kommt, auf seine Existenz verweisen, wir müssen es "laden":
```{r message=FALSE, warning=FALSE, paged.print=FALSE}
library(Biotech)
# Wir laden auch tidverse, dieses Paket enthält eine Menge
# nützlicher Funktionen
library(tidyverse)
# Wir laden auch tidverse, dieses Paket enthält eine Menge
# nützlicher Funktionen
library(tidyverse)
library(tidyverse)
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
library(tidyr)
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
library(tidyr)
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "crosstalk", "dbplyr", "devtools", "DT", "fs", "glue", "gtools", "isoband", "kohonen", "lme4", "lubridate", "multcomp", "pkgbuild", "plotly", "plotrix", "proxy", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "rgl", "roxygen2", "shiny", "survival", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
View(Std)
install.packages("bibtex")
install.packages("bookdownplus")
install.packages("bookdown")
library(bookdown)
